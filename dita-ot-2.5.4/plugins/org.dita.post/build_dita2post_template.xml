<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of the DITA Open Toolkit project.

Copyright 2015 Jarno Elovirta

See the accompanying LICENSE file for applicable license.
-->
<project xmlns:dita="http://dita-ot.sourceforge.net" name="dita2post">
  <target name="dita2post" depends="post.init, build-init, preprocess, post.topic, post.map, post.metadata"/>
   <target name="post.init">
   <condition property="preprocess.chunk.skip">
    <equals arg1="${transtype}" arg2="post" casesensitive="true"/>
  </condition>
    <condition property="args.xsl" value="${dita.plugin.org.dita.post.dir}/xsl/dita2post.xsl">
      <not>
        <isset property="args.xsl"/>
      </not>
    </condition>
    <condition property="post.nav-toc" value="${nav-toc}" else="none">
      <isset property="nav-toc"/>
    </condition>
    <dita-ot-fail id="DOTA007E">
      <condition>
        <and>
          <isset property="args.ftr"/>
          <not>
            <available file="${args.ftr}" type="file"/>
          </not>
        </and>
      </condition>
      <param name="1" value="${args.ftr}"/>
    </dita-ot-fail>
    <dita-ot-fail id="DOTA008E">
      <condition>
        <and>
          <isset property="args.hdr"/>
          <not>
            <available file="${args.hdr}" type="file"/>
          </not>
        </and>
      </condition>
      <param name="1" value="${args.hdr}"/>
    </dita-ot-fail>
    <dita-ot-fail id="DOTA009E">
      <condition>
        <and>
          <isset property="args.hdf"/>
          <not>
            <available file="${args.hdf}" type="file"/>
          </not>
        </and>
      </condition>
      <param name="1" value="${args.hdf}"/>
    </dita-ot-fail>
    <!-- begin to check and init css relevant properties -->
    <condition property="user.csspath.url">
      <or>
        <contains string="${args.csspath}" substring="http://"/>
        <contains string="${args.csspath}" substring="https://"/>
      </or>
    </condition>
    <condition property="args.csspath.absolute">
      <isabsolute path="${args.csspath}"/>
    </condition>
    <!-- Set the csspath as default empty directory when there is no user
      input csspath or user input csspath is a local absolute path. -->
    <condition property="user.csspath" value="">
      <or>
        <not>
          <isset property="args.csspath"/>
        </not>
        <isset property="args.csspath.absolute"/>
      </or>
    </condition>
    <condition property="user.csspath" value="${args.csspath}/">
      <not>
        <isset property="user.csspath"/>
      </not>
    </condition>
    <condition property="args.css.real" value="${args.cssroot}${file.separator}${args.css}">
      <isset property="args.cssroot"/>
    </condition>
    <condition property="args.css.real" value="${args.css}">
      <not>
        <isset property="args.cssroot"/>
      </not>
    </condition>
    <available file="${args.css.real}" property="args.css.present" type="file"/>
    <basename property="args.css.file.temp" file="${args.css}"/>
    <condition property="args.css.file" value="${args.css.file.temp}">
      <or>
        <isset property="args.css.present"/>
        <isset property="user.csspath.url"/>
      </or>
    </condition>
    <!-- end to check and init css relevant parameters -->
    <condition property="out.ext" value=".html">
      <not>
        <isset property="args.outext"/>
      </not>
    </condition>
    <!-- Set to "true" if you get out-of-memory errors during preprocess
    while processing very large (thousands of files) document sets. -->
    <condition property="dita.post.reloadstylesheet" value="false">
      <not>
        <isset property="dita.post.reloadstylesheet"/>
      </not>
    </condition>
  </target>

  <target name="post.topic"
          depends="post.topic.init,
                   post.image-metadata,
                   post.topics.common,
                   post.topics.common.inner"/>

  <target name="post.topic.init" unless="noMap">
    <loadfile property="post.map" srcfile="${dita.temp.dir}/${user.input.file.listfile}">
      <filterchain>
        <headfilter lines="1"/>
      </filterchain>
    </loadfile>
    <makeurl property="post.map.url" file="${dita.temp.dir}/${post.map}"/>
    <makeurl file="${dita.input.valfile}" property="dita.input.valfile.url" validate="no"/>    
  </target>

  <target name="post.image-metadata"
          unless="post.image-metadata.skip" description="Read image metadata">
    <pipeline message="Read image metadata." taskname="image-metadata" tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.ImageMetadataModule">
        <param name="outputdir" location="${dita.output.dir}"/>
      </module>
    </pipeline>
  </target>

  <target name="post.topics.common" unless="noTopic" if="old.transform">
    <post.topics>
      <dita:extension id="dita.conductor.post.param" behavior="org.dita.dost.platform.InsertAction"/>
      <mapper classname="org.dita.dost.util.JobMapper" to="${out.ext}"/>
    </post.topics>
  </target>

  <target name="post.topics.common.inner" unless="noTopic" if="inner.transform">
    <post.topics>
      <dita:extension id="dita.conductor.post.param" behavior="org.dita.dost.platform.InsertAction"/>
      <mapper classname="org.dita.dost.util.JobMapper" to="${out.ext}"/>
</post.topics>
  </target>

  <target name="post.map"
          depends="post.map.init,
                   post.map.toc"/>

  <target name="post.map.init" unless="noMap">
    <condition property="args.post.toc.xsl" value="${dita.plugin.org.dita.post.dir}/xsl/map2post-cover.xsl">
      <not>
        <isset property="args.post.toc.xsl"/>
      </not>
    </condition>
    <condition property="args.post.toc" value="toc">
      <not>
        <isset property="args.post.toc"/>
      </not>
    </condition>
  </target>

  <target name="post.map.toc" unless="noMap" description="Build post TOC file">
    <post.map>
      <dita:extension id="dita.conductor.post.toc.param" behavior="org.dita.dost.platform.InsertAction"/>
    </post.map>
  </target>

  <macrodef name="post.topics">
    <element name="params" optional="true" implicit="true"/>
    <sequential>
      <pipeline message="Convert DITA topic to post" taskname="xslt">
      <xslt basedir="${dita.temp.dir}"
            destdir="${dita.output.dir}"
            reloadstylesheet="${dita.post.reloadstylesheet}"
            classpathref="dost.class.path"
            extension="${out.ext}"
            style="${args.xsl}"
            filenameparameter="FILENAME"
            filedirparameter="FILEDIR">
        <ditaFileset format="dita" processingRole="normal"/>
        <param name="FILTERFILE" expression="${dita.input.valfile.url}" if="dita.input.valfile"/>
        <param name="CSS" expression="${args.css.file}" if="args.css.file"/>
        <param name="CSSPATH" expression="${user.csspath}" if="user.csspath"/>
        <param name="HDF" expression="${args.hdf}" if="args.hdf"/>
        <param name="HDR" expression="${args.hdr}" if="args.hdr"/>
        <param name="FTR" expression="${args.ftr}" if="args.ftr"/>
        <param name="DRAFT" expression="${args.draft}" if="args.draft"/>
        <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"/>
        <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"/>
		<param name="ditamap" expression="${dita.temp.dir}${file.separator}${dita.map.filename.root}.ditamap"/>
        <param name="PRESERVE-DITA-CLASS" expression="${args.post.classattr}" if="args.post.classattr"/>
        <param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"/>
        <param name="include.rellinks" expression="${include.rellinks}"/>
        <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"/>
        <param name="genDefMeta" expression="${args.gen.default.meta}" if="args.gen.default.meta"/>
        <param name="OUTEXT" expression="${out.ext}" if="out.ext"/>
        <param name="BASEDIR" expression="${basedir}"/>
        <param name="OUTPUTDIR" expression="${dita.output.dir}"/>
        <param name="defaultLanguage" expression="${default.language}"/>
        <param name="job" expression="${user.input.dir}${file.separator}ishjobticket.xml"/>
		<param name="inputdir" expression="${user.input.dir}"/>
		<params/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
      </pipeline>
    </sequential>
  </macrodef>

  <macrodef name="post.map">
    <element name="params" optional="true" implicit="true"/>
    <sequential>
      <local name="post.toc.output.dir"/>
      <condition property="post.toc.output.dir" value="${dita.output.dir}" else="${_dita.map.output.dir}">
        <isset property="inner.transform"/>
      </condition>
      <pipeline message="Convert DITA map to post" taskname="xslt">
      <xslt basedir="${dita.temp.dir}"
            destdir="${post.toc.output.dir}"
            includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}"
            classpathref="dost.class.path"
            style="${args.post.toc.xsl}">
        <param name="FILTERFILE" expression="${dita.input.valfile.url}" if="dita.input.valfile"/>
        <param name="OUTEXT" expression="${out.ext}" if="out.ext"/>
        <param name="contenttarget" expression="${args.post.contenttarget}" if="args.post.contenttarget"/>
        <param name="CSS" expression="${args.css.file}" if="args.css.file"/>
        <param name="CSSPATH" expression="${user.csspath}" if="user.csspath"/>
        <param name="OUTPUTCLASS" expression="${args.post.toc.class}" if="args.post.toc.class"/>
        <params/>
        <mapper type="merge" to="${args.post.toc}.xml"/>
		<xmlcatalog refid="dita.catalog"/>
      </xslt>
      </pipeline>
    </sequential>
  </macrodef>

<target name="post.metadata" depends="post.glossary.collator">
      <loadfile property="ditamapfileList" srcFile="${dita.temp.dir}${file.separator}${fullditamapfile}"/>
		<xslt processor="trax" basedir="${dita.temp.dir}" destdir="${output.dir}" in="${dita.temp.dir}/.job.xml" out="${output.dir}${file.separator}_meta${file.separator}metadata.xml" style= "${dita.plugin.org.dita.post.dir}${file.separator}xsl${file.separator}metadata.xsl">
			<param name="ditamap" expression="${dita.temp.dir}${file.separator}${dita.map.filename.root}.ditamap"/>
			<param name="OUTEXT" expression="${out.ext}" if="out.ext"/>
            <param name="job" expression="${user.input.dir}${file.separator}ishjobticket.xml"/>
			<param name="inputdir" expression="${user.input.dir}"/>
            <param name="TEMPDIR" expression="${dita.temp.dir}"/>
            <param name="MAPLIST" expression="${ditamapfileList}"/>
			<param name="ishjob" expression="${dita.temp.dir}${file.separator}.job.xml"/>
			<xmlcatalog refid="dita.catalog"/>
		</xslt>
    </target>

<target name="post.glossary.collator" description="Collate and generate Glossary Topics for given input Ditamap">
	<echo message="Executing Glossary Collator"/>
	<property environment="env"/>
	<echo message="JAVA_HOME is set to = ${env.JAVA_HOME}"/>
	
	<path id="post.project.class.libpath">
		<fileset dir="${dita.dir}${file.separator}lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${dita.dir}${file.separator}plugins${file.separator}org.dita.post${file.separator}lib${file.separator}GlossaryCollator.jar"/>
		<fileset dir="${dita.dir}${file.separator}plugins${file.separator}org.dita.post${file.separator}lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<pathconvert property="glosslibpath" refid="post.project.class.libpath"/>
	<!--<echo message="Project lib path is : ${glosslibpath}"/>-->

	<java classname="com.dell.action.tasks.TopicsUtilities">
		<classpath refid="post.project.class.libpath"/>
		<arg value="${args.input}"/> <!--ditamap input dir-->
		<arg value="${dita.temp.dir}"/> <!--dita ot temp dir-->
		<arg value="${output.dir}"/><!--dita ot output dir-->
		<arg value="${dita.plugin.org.dita.post.dir}"/> <!-- plugin dir -->
		<arg value="all"/> <!-- action type -->
	</java>
	<!--<fail unless="ExecStatus"/>-->
</target>
</project>
