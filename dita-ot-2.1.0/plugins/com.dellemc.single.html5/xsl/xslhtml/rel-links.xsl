<?xml version="1.0" encoding="UTF-8" ?>

<xsl:stylesheet version="2.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:ditamsg="http://dita-ot.sourceforge.net/ns/200704/ditamsg"
                xmlns:related-links="http://dita-ot.sourceforge.net/ns/200709/related-links"
                xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot"
                exclude-result-prefixes="xs related-links ditamsg dita-ot">

    <xsl:template match="*[contains(@class, ' topic/related-links ')]" name="topic.related-links" priority="2">
        <!-- Comtech 07/18/2013 change <div> to <section> -->
        <div style="padding-bottom:24pt;">
            <xsl:call-template name="commonattributes"/>

            <xsl:call-template name="ul-child-links"/>
            <!--handle child/descendants outside of linklists in collection-type=unordered or choice-->
            <xsl:call-template name="ol-child-links"/>

            <!-- Comtech Services 08/20/2013 comment out templates to prevent family linking list caused by overriding nextprevfulliteration file to force sequence browsing -->
            <!--xsl:if test="not($disableRelatedLinks='nofamily')">
              <xsl:call-template name="ul-child-links"/>
            </xsl:if-->
            <!--handle child/descendants outside of linklists in collection-type=ordered/sequence-->

            <!-- OXYGEN PATCH START EXM-17960 - omit links generated by DITA-OT. -->
            <!-- IBHTML5 28/07/2014 TKT-110: HTML5 Single and WebHelp "type"/"class" attribute For WebHelp -->
            <xsl:variable name="parentMapClass"
                          select="descendant::*[contains(@class, ' topic/link ')][@role='parent'][1]/@mapclass"/>
            <!--
                        <xsl:if test="not(contains($parentMapClass, 'bookmap/chapter') or contains($parentMapClass, 'bookmap/appendix'))">
                            <xsl:call-template name="next-prev-parent-links"/>
                        </xsl:if>
            -->
            <!--            <xsl:call-template name="next-prev-parent-links"/>-->
            <!--handle next and previous links-->
            <!-- OXYGEN PATCH END EXM-17960 - omit links generated by DITA-OT. -->
            <xsl:variable name="links-role">
                <xsl:for-each select="descendant::*[contains(@class, ' topic/link ')][normalize-space(@role)]
                                            [not(related-links:omit-from-unordered-links(.))]
                                            [generate-id(.) = generate-id(key('hideduplicates', related-links:hideduplicates(.))[1])]">
                    <xsl:copy-of select="."/>
                </xsl:for-each>
            </xsl:variable>
            <xsl:variable name="links-no-role">
                <xsl:for-each select="descendant::*[contains(@class, ' topic/link ')][not(normalize-space(@role))]
                                            [not(related-links:omit-from-unordered-links(.))]
                                            [generate-id(.) = generate-id(key('hideduplicates', related-links:hideduplicates(.))[1])]">
                    <xsl:copy-of select="."/>
                </xsl:for-each>
            </xsl:variable>

            <xsl:variable name="links-filtered">
                <xsl:for-each select="$links-role/*">
                    <xsl:variable name="ref-topic" select="substring-after(@href, '#')"/>
                    <xsl:variable name="src-topic" select="substring-before(@href, '#')"/>
                    <xsl:variable name="src-topic-uri" select="concat($temp-dir-uri, $src-topic)"/>
                    <xsl:if test="doc-available($src-topic-uri) and exists(document($src-topic-uri)/descendant::*[@id = $ref-topic])">
                        <xsl:copy-of select="."/>
                    </xsl:if>
                </xsl:for-each>
                <xsl:for-each select="$links-no-role/*">
                    <xsl:variable name="current-href" select="@href"/>
                    <xsl:variable name="ref-topic" select="substring-after(@href, '#')"/>
                    <xsl:variable name="src-topic" select="substring-before(@href, '#')"/>
                    <xsl:variable name="src-topic-uri" select="concat($temp-dir-uri, $src-topic)"/>
                    <xsl:if test="doc-available($src-topic-uri) and exists(document($src-topic-uri)/descendant::*[@id = $ref-topic])">
                        <xsl:if test="not($links-role/descendant::*[@href = $current-href])">
                            <xsl:copy-of select="."/>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
            </xsl:variable>

            <xsl:variable name="unordered-links" as="element(linklist)*">
                <xsl:apply-templates select="." mode="related-links:group-unordered-links">
                    <xsl:with-param name="nodes" select="$links-filtered/*"/>
                </xsl:apply-templates>
            </xsl:variable>
            <xsl:apply-templates select="$unordered-links"/>
            <!--linklists - last but not least, create all the linklists and their links, with no sorting or re-ordering-->
            <!--            <xsl:apply-templates select="*[contains(@class, ' topic/linklist ')]"/>-->
        </div>
    </xsl:template>

    <xsl:template match="*" mode="determine-final-href">
        <xsl:choose>
            <xsl:when test="not(normalize-space(@href)) or empty(@href)"/>
            <!-- For non-DITA formats - use the href as is -->
            <xsl:when test="(empty(@format) and @scope = 'external') or (@format and not(@format = 'dita'))">
                <xsl:value-of select="@href"/>
            </xsl:when>
            <!-- For DITA - process the internal href -->
            <xsl:when test="starts-with(@href, '#')">
                <xsl:text>#</xsl:text>
                <xsl:value-of select="dita-ot:generate-id(dita-ot:get-topic-id(@href), dita-ot:get-element-id(@href))"/>
            </xsl:when>
            <!-- It's to a DITA file - process the file name (adding the html extension)
          and process the rest of the href -->
            <xsl:when test="(empty(@scope) or @scope = ('local', 'peer')) and (empty(@format) or @format = 'dita')">
<!--
                <xsl:call-template name="replace-extension">
                    <xsl:with-param name="filename" select="@href"/>
                    <xsl:with-param name="extension" select="$OUTEXT"/>
                    <xsl:with-param name="ignore-fragment" select="true()"/>
                </xsl:call-template>
-->
                <xsl:if test="contains(@href, '#')">
                    <xsl:text>#</xsl:text>
                    <xsl:value-of select="dita-ot:generate-id(dita-ot:get-topic-id(@href), dita-ot:get-element-id(@href))"/>
                </xsl:if>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="." mode="ditamsg:unknown-extension"/>
                <xsl:value-of select="@href"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

</xsl:stylesheet>