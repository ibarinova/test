<?xml version="1.0" encoding="UTF-8" ?>

<xsl:stylesheet version="2.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:ditamsg="http://dita-ot.sourceforge.net/ns/200704/ditamsg"
                xmlns:related-links="http://dita-ot.sourceforge.net/ns/200709/related-links"
                xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot"
                exclude-result-prefixes="xs related-links ditamsg dita-ot">

    <!--  EMC 	15-Oct-2014		Changed the footer to div -->
    <!-- main template for setting up all links after the body - applied to the related-links container-->
    <xsl:template match="*[contains(@class, ' topic/related-links ')]" name="topic.related-links">
        <!-- Comtech 07/18/2013 change <div> to <section> -->
        <div style="padding-bottom:24pt;">
            <xsl:call-template name="commonattributes"/>

            <xsl:call-template name="ul-child-links"/>
            <!--handle child/descendants outside of linklists in collection-type=unordered or choice-->
            <xsl:call-template name="ol-child-links"/>

            <!-- Comtech Services 08/20/2013 comment out templates to prevent family linking list caused by overriding nextprevfulliteration file to force sequence browsing -->
            <!--xsl:if test="not($disableRelatedLinks='nofamily')">
              <xsl:call-template name="ul-child-links"/>
            </xsl:if-->
            <!--handle child/descendants outside of linklists in collection-type=ordered/sequence-->

            <!-- OXYGEN PATCH START EXM-17960 - omit links generated by DITA-OT. -->
            <!-- IBHTML5 28/07/2014 TKT-110: HTML5 Single and WebHelp "type"/"class" attribute For WebHelp -->
            <xsl:variable name="parentMapClass"
                          select="descendant::*[contains(@class, ' topic/link ')][@role='parent'][1]/@mapclass"/>
<!--
            <xsl:if test="not(contains($parentMapClass, 'bookmap/chapter') or contains($parentMapClass, 'bookmap/appendix'))">
                <xsl:call-template name="next-prev-parent-links"/>
            </xsl:if>
-->
            <xsl:call-template name="next-prev-parent-links"/>
            <!--handle next and previous links-->
            <!-- OXYGEN PATCH END EXM-17960 - omit links generated by DITA-OT. -->
            <xsl:variable name="links-role">
                <xsl:for-each select="descendant::*[contains(@class, ' topic/link ')][normalize-space(@role)]
                                            [not(related-links:omit-from-unordered-links(.))]
                                            [generate-id(.) = generate-id(key('hideduplicates', related-links:hideduplicates(.))[1])]">
                    <xsl:copy-of select="."/>
                </xsl:for-each>
            </xsl:variable>
            <xsl:variable name="links-no-role">
                <xsl:for-each select="descendant::*[contains(@class, ' topic/link ')][not(normalize-space(@role))]
                                            [not(related-links:omit-from-unordered-links(.))]
                                            [generate-id(.) = generate-id(key('hideduplicates', related-links:hideduplicates(.))[1])]">
                    <xsl:copy-of select="."/>
                </xsl:for-each>
            </xsl:variable>

            <xsl:variable name="links-filtered">
                <xsl:for-each select="$links-role/*">
                    <xsl:if test="doc-available(concat($temp-dir-uri, @href))">
                        <xsl:copy-of select="."/>
                    </xsl:if>
                </xsl:for-each>
                <xsl:for-each select="$links-no-role/*">
                    <xsl:variable name="current-href" select="@href"/>
                    <xsl:if test="doc-available(concat($temp-dir-uri, @href))">
                        <xsl:if test="not($links-role/descendant::*[@href = $current-href])">
                            <xsl:copy-of select="."/>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
            </xsl:variable>

            <xsl:variable name="unordered-links" as="element(linklist)*">
                <xsl:apply-templates select="." mode="related-links:group-unordered-links">
                    <xsl:with-param name="nodes" select="$links-filtered/*"/>
                </xsl:apply-templates>
            </xsl:variable>
            <xsl:apply-templates select="$unordered-links"/>
            <!--linklists - last but not least, create all the linklists and their links, with no sorting or re-ordering-->
<!--            <xsl:apply-templates select="*[contains(@class, ' topic/linklist ')]"/>-->
        </div>
    </xsl:template>

    <xsl:template match="*[contains(@class, ' topic/xref ')][not(@type = 'fn')]" name="topic.xref">
        <xsl:choose>
            <xsl:when test="@href and normalize-space(@href)">
                <xsl:apply-templates select="." mode="add-xref-highlight-at-start"/>
                <a>
                    <xsl:call-template name="commonattributes"/>
                    <xsl:apply-templates select="." mode="add-linking-attributes"/>
                    <xsl:apply-templates select="." mode="add-desc-as-hoverhelp"/>
                    <!-- if there is text or sub element other than desc, apply templates to them
                    otherwise, use the href as the value of link text. -->
                    <xsl:choose>
                        <xsl:when test="*[not(contains(@class, ' topic/desc '))] | text()">
                            <xsl:apply-templates select="*[not(contains(@class, ' topic/desc '))] | text()"/>
                            <!--use xref content-->
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="cleanHref">
                                <xsl:call-template name="href"/>
                            </xsl:variable>
                            <xsl:choose>
                                <xsl:when test="contains($cleanHref,'.xml')">
                                    <xsl:value-of select="substring-before($cleanHref,'.xml')"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$cleanHref"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <!--use href text-->
                        </xsl:otherwise>
                    </xsl:choose>
                </a>
                <xsl:apply-templates select="." mode="add-xref-highlight-at-end"/>
            </xsl:when>
            <xsl:otherwise>
                <span>
                    <xsl:call-template name="commonattributes"/>
                    <xsl:apply-templates select="." mode="add-desc-as-hoverhelp"/>
                    <xsl:apply-templates select="*[not(contains(@class, ' topic/desc '))] | text() | comment() | processing-instruction()"/>
                </span>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!--ordered child processing-->
    <xsl:template match="*[@collection-type='sequence']/*[contains(@class, ' topic/link ')][@role='child' or @role='descendant']" priority="3" name="topic.link_orderedchild">
        <xsl:variable name="el-name" as="xs:string">
            <xsl:choose>
                <xsl:when test="contains(../@class, ' topic/linklist ')">div</xsl:when>
                <xsl:otherwise>li</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:element name="{$el-name}">
            <xsl:attribute name="class">olchildlink</xsl:attribute>
            <xsl:call-template name="commonattributes">
                <xsl:with-param name="default-output-class" select="'olchildlink'"/>
            </xsl:call-template>
            <!-- Allow for unknown metadata (future-proofing) -->
            <xsl:apply-templates select="*[contains(@class, ' topic/data ') or contains(@class, ' topic/foreign ')]"/>
            <xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-startprop ')]" mode="out-of-line"/>
            <xsl:apply-templates select="." mode="related-links:ordered.child.prefix"/>
            <xsl:apply-templates select="." mode="add-link-highlight-at-start"/>
            <a>
                <xsl:apply-templates select="." mode="add-linking-attributes"/>
                <xsl:apply-templates select="." mode="add-hoverhelp-to-child-links"/>

                <!--use linktext as linktext if it exists, otherwise use href as linktext-->
                <xsl:choose>
                    <xsl:when test="*[contains(@class, ' topic/linktext ')]">
                        <xsl:apply-templates select="*[contains(@class, ' topic/linktext ')]"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <!--use href-->
                        <xsl:call-template name="href"/>
                    </xsl:otherwise>
                </xsl:choose>
            </a>
            <xsl:apply-templates select="." mode="add-link-highlight-at-end"/>
            <xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-endprop ')]" mode="out-of-line"/>
            <!-- EMC		17-Nov-2014		Fixed the spacing for sequence page -->
            <div/>
            <xsl:value-of select="$newline"/>
            <!--add the description on a new line, unlike an info, to avoid issues with punctuation (adding a period)-->
            <xsl:apply-templates select="*[contains(@class, ' topic/desc ')]"/>
        </xsl:element>
        <xsl:value-of select="$newline"/>
    </xsl:template>

    <!--basic child processing-->
    <xsl:template match="*[contains(@class, ' topic/link ')][@role='child' or @role='descendant']" priority="2" name="topic.link_child">
        <xsl:variable name="el-name">
            <xsl:choose>
                <xsl:when test="contains(../@class, ' topic/linklist ')">div</xsl:when>
                <xsl:otherwise>li</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:element name="{$el-name}">
            <xsl:attribute name="class">ulchildlink</xsl:attribute>
            <xsl:call-template name="commonattributes">
                <xsl:with-param name="default-output-class" select="'ulchildlink'"/>
            </xsl:call-template>
            <!-- Allow for unknown metadata (future-proofing) -->
            <xsl:apply-templates select="*[contains(@class, ' topic/data ') or contains(@class, ' topic/foreign ')]"/>
            <xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-startprop ')]" mode="out-of-line"/>
            <strong>
                <xsl:apply-templates select="." mode="related-links:unordered.child.prefix"/>
                <xsl:apply-templates select="." mode="add-link-highlight-at-start"/>
                <a>
                    <xsl:apply-templates select="." mode="add-linking-attributes"/>
                    <xsl:apply-templates select="." mode="add-hoverhelp-to-child-links"/>

                    <!--use linktext as linktext if it exists, otherwise use href as linktext-->
                    <xsl:choose>
                        <xsl:when test="*[contains(@class, ' topic/linktext ')]">
                            <xsl:apply-templates select="*[contains(@class, ' topic/linktext ')]"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <!--use href-->
                            <xsl:call-template name="href"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </a>
                <xsl:apply-templates select="." mode="add-link-highlight-at-end"/>
            </strong>
            <xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-endprop ')]" mode="out-of-line"/>
            <!-- EMC		20-Nov-2014		Fixed the spacing for sequence page -->
            <div/>
            <xsl:value-of select="$newline"/>
            <!--add the description on the next line, like a summary-->
            <xsl:apply-templates select="*[contains(@class, ' topic/desc ')]"/>
        </xsl:element>
        <xsl:value-of select="$newline"/>
    </xsl:template>

</xsl:stylesheet>